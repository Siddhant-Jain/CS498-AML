nvals = c(10, 100, 200, 500)
delta = c(0, 0.1, 0.5, 0.8)
alpha = 0.5
m = 50
at = matrix(0, 4, 4)
aw_exact = matrix(0, 4, 4)
#aw_asym = matrix(0, 4, 4)
for (i in 1:4) {
n = nvals[i]
for (k in 1:4) {
mu = delta[k]
pt = numeric(m)
pwe = numeric(m)
pwa = numeric(m)
for (j in 1:m) {
x = rnorm(n)
y = rnorm(n, -mu, 1)
pt[j] = t.test(x, y, var.equal=TRUE)$p.value
pwe[j] = wilcox.test(x, y, exact=TRUE)$p.value
#pwa[j] = wilcox.test(x, y, exact=FALSE)$p.value
}
at[i,k] = mean(pt)
aw_exact[i,k] = mean(pwe)
#aw_asym[i,k] = mean(pwa)
}
}
delta=c(0,0.5,1,2)
nvals=seq(2,50,by=1)
power.t=
power.wil.exact=
power.wil.asym=rep(0,length(nvals))
t.test.table=
wilcox.asym.table=
wilcox.exact.table=
matrix(nrow=length(nvals),ncol=length(delta))
for(d in 1:length(delta)) {
for (i in 1:length(nvals)) {
k = nvals[i]
power.t[i] = mean(replicate(500,t.test(
rnorm(k,0,1),rnorm(k,-delta[d],1),var.equal = TRUE)$p.value) <= .05)
power.wil.asym[i] = mean(replicate(500,wilcox.test(
rnorm(k,0,1),rnorm(k,-delta[d],1),exact = FALSE)$p.value) <= .05)
power.wil.exact[i] = mean(replicate(500,wilcox.test(
rnorm(k,0,1),rnorm(k,-delta[d],1),exact = TRUE)$p.value) <= .05)
}
t.test.table[,d]=power.t
wilcox.asym.table[,d]=power.wil.asym
wilcox.exact.table[,d]=power.wil.exact
}
#a
nvals = c(10, 100, 200, 500)
delta = c(0, 0.1, 0.5, 0.8)
alpha = 0.5
m = 50
at = matrix(0, 4, 4)
aw_exact = matrix(0, 4, 4)
#aw_asym = matrix(0, 4, 4)
for (i in 1:4) {
n = nvals[i]
for (k in 1:4) {
mu = delta[k]
#pt = numeric(m)
#pwe = numeric(m)
#pwa = numeric(m)
#for (j in 1:m) {
x = rnorm(n)
y = rnorm(n, -mu, 1)
pt = replicate(500, t.test(x, y, var.equal=TRUE)$p.value)
pwe[j] = replicate(500, wilcox.test(x, y, exact=TRUE)$p.value)
#pwa[j] = wilcox.test(x, y, exact=FALSE)$p.value
#}
at[i,k] = mean(pt)
aw_exact[i,k] = mean(pwe)
#aw_asym[i,k] = mean(pwa)
}
}
#a
nvals = c(10, 100, 200, 500)
delta = c(0, 0.1, 0.5, 0.8)
alpha = 0.5
m = 50
at = matrix(0, 4, 4)
aw_exact = matrix(0, 4, 4)
#aw_asym = matrix(0, 4, 4)
for (i in 1:4) {
n = nvals[i]
for (k in 1:4) {
mu = delta[k]
pt = numeric(m)
pwe = numeric(m)
pwa = numeric(m)
#for (j in 1:m) {
x = rnorm(n)
y = rnorm(n, -mu, 1)
pt = replicate(m, t.test(x, y, var.equal=TRUE)$p.value)
pwe[j] = replicate(m, wilcox.test(x, y, exact=TRUE)$p.value)
#pwa[j] = wilcox.test(x, y, exact=FALSE)$p.value
#}
at[i,k] = mean(pt)
aw_exact[i,k] = mean(pwe)
#aw_asym[i,k] = mean(pwa)
}
}
#a
nvals = c(10, 100, 200, 500)
delta = c(0, 0.1, 0.5, 0.8)
alpha = 0.5
m = 50
at = matrix(0, 4, 4)
aw_exact = matrix(0, 4, 4)
#aw_asym = matrix(0, 4, 4)
for (i in 1:4) {
n = nvals[i]
for (k in 1:4) {
mu = delta[k]
pt = numeric(m)
pwe = numeric(m)
pwa = numeric(m)
#for (j in 1:m) {
x = rnorm(n)
y = rnorm(n, -mu, 1)
pt = replicate(m, t.test(x, y, var.equal=TRUE)$p.value)
pwe = replicate(m, wilcox.test(x, y, exact=TRUE)$p.value)
#pwa[j] = wilcox.test(x, y, exact=FALSE)$p.value
#}
at[i,k] = mean(pt)
aw_exact[i,k] = mean(pwe)
#aw_asym[i,k] = mean(pwa)
}
}
#a
nvals = c(10, 100, 200, 500)
delta = c(0, 0.1, 0.5, 0.8)
alpha = 0.5
m = 50
at = matrix(0, 4, 4)
aw_exact = matrix(0, 4, 4)
#aw_asym = matrix(0, 4, 4)
for (i in 1:4) {
n = nvals[i]
for (k in 1:4) {
mu = delta[k]
#pt = numeric(m)
#pwe = numeric(m)
#pwa = numeric(m)
#for (j in 1:m) {
x = rnorm(n)
y = rnorm(n, -mu, 1)
pt = replicate(m, t.test(x, y, var.equal=TRUE)$p.value)
pwe = replicate(m, wilcox.test(x, y, exact=TRUE)$p.value)
#pwa = replicate(m, wilcox.test(x, y, exact=FALSE)$p.value)
#}
at[i,k] = mean(pt)
aw_exact[i,k] = mean(pwe)
#aw_asym[i,k] = mean(pwa)
}
}
#a
nvals = c(10, 20, 50, 100)
delta = c(0, 0.1, 0.5, 0.8)
alpha = 0.5
m = 50
at = matrix(0, 4, 4)
aw_exact = matrix(0, 4, 4)
#aw_asym = matrix(0, 4, 4)
for (i in 1:4) {
n = nvals[i]
for (k in 1:4) {
mu = delta[k]
#pt = numeric(m)
#pwe = numeric(m)
#pwa = numeric(m)
#for (j in 1:m) {
x = rnorm(n)
y = rnorm(n, -mu, 1)
pt = replicate(m, t.test(x, y, var.equal=TRUE)$p.value)
pwe = replicate(m, wilcox.test(x, y, exact=TRUE)$p.value)
#pwa = replicate(m, wilcox.test(x, y, exact=FALSE)$p.value)
#}
at[i,k] = mean(pt)
aw_exact[i,k] = mean(pwe)
#aw_asym[i,k] = mean(pwa)
}
}
#a
nvals = c(10, 20, 35, 50)
delta = c(0, 0.1, 0.5, 0.8)
alpha = 0.5
m = 50
at = matrix(0, 4, 4)
aw_exact = matrix(0, 4, 4)
#aw_asym = matrix(0, 4, 4)
for (i in 1:4) {
n = nvals[i]
for (k in 1:4) {
mu = delta[k]
#pt = numeric(m)
#pwe = numeric(m)
#pwa = numeric(m)
#for (j in 1:m) {
x = rnorm(n)
y = rnorm(n, -mu, 1)
pt = replicate(m, t.test(x, y, var.equal=TRUE)$p.value)
pwe = replicate(m, wilcox.test(x, y, exact=TRUE)$p.value)
#pwa = replicate(m, wilcox.test(x, y, exact=FALSE)$p.value)
#}
at[i,k] = mean(pt)
aw_exact[i,k] = mean(pwe)
#aw_asym[i,k] = mean(pwa)
}
}
print(at) #type1 values for the t test
print(aw_exact) #type1 values for the exact w test
#print(aw_asym) #type1 values for the asymptotic w test
#a
nvals = c(10, 20, 35, 50)
delta = c(0, 0.1, 0.5, 0.8)
alpha = 0.5
m = 50
at = matrix(0, 4, 4)
aw_exact = matrix(0, 4, 4)
#aw_asym = matrix(0, 4, 4)
for (i in 1:4) {
n = nvals[i]
for (k in 1:4) {
mu = delta[k]
x = rnorm(n)
y = rnorm(n, -mu, 1)
pt = replicate(m, t.test(x, y, var.equal=TRUE)$p.value)
pwe = replicate(m, wilcox.test(x, y, exact=TRUE)$p.value)
pwa = replicate(m, wilcox.test(x, y, exact=FALSE)$p.value)
at[i,k] = mean(pt)
aw_exact[i,k] = mean(pwe)
aw_asym[i,k] = mean(pwa)
}
}
print(at) #type1 values for the t test
print(aw_exact) #type1 values for the exact w test
print(aw_asym) #type1 values for the asymptotic w test
#a
nvals = c(10, 20, 35, 50)
delta = c(0, 0.1, 0.5, 0.8)
alpha = 0.5
m = 50
at = matrix(0, 4, 4)
aw_exact = matrix(0, 4, 4)
aw_asym = matrix(0, 4, 4)
for (i in 1:4) {
n = nvals[i]
for (k in 1:4) {
mu = delta[k]
x = rnorm(n)
y = rnorm(n, -mu, 1)
pt = replicate(m, t.test(x, y, var.equal=TRUE)$p.value)
pwe = replicate(m, wilcox.test(x, y, exact=TRUE)$p.value)
pwa = replicate(m, wilcox.test(x, y, exact=FALSE)$p.value)
at[i,k] = mean(pt)
aw_exact[i,k] = mean(pwe)
aw_asym[i,k] = mean(pwa)
}
}
print(at) #type1 values for the t test
print(aw_exact) #type1 values for the exact w test
print(aw_asym) #type1 values for the asymptotic w test
#a
nvals = c(10, 20, 35, 50)
delta = c(0, 0.1, 0.5, 0.8)
alpha = 0.5
m = 500
at = matrix(0, 4, 4)
aw_exact = matrix(0, 4, 4)
aw_asym = matrix(0, 4, 4)
for (i in 1:4) {
n = nvals[i]
for (k in 1:4) {
mu = delta[k]
x = rnorm(n)
y = rnorm(n, -mu, 1)
pt = replicate(m, t.test(x, y, var.equal=TRUE)$p.value)
pwe = replicate(m, wilcox.test(x, y, exact=TRUE)$p.value)
pwa = replicate(m, wilcox.test(x, y, exact=FALSE)$p.value)
at[i,k] = mean(pt)
aw_exact[i,k] = mean(pwe)
aw_asym[i,k] = mean(pwa)
}
}
print(at) #type1 values for the t test
print(aw_exact) #type1 values for the exact w test
print(aw_asym) #type1 values for the asymptotic w test
alpha = 0.1
nvals = c(20, 50, 100)
thetan = array(dim=3)
thetae = array(dim=3)
thetac = array(dim=3)
thetau = array(dim=3)
se_norm = array(dim=3)
se_exp = array(dim=3)
se_cauchy = array(dim=3)
se_unif = array(dim=3)
for (i in 1:3) {
n = nvals[i]
norm = rnorm(n)
exp = rexp(n)
unif = runif(n)
c = rcauchy(n)
thetan[i] = median(norm)
thetae[i] = median(exp)
thetac[i] = median(c)
thetau[i] = median(unif)
thetabootn = numeric(m)
thetaboote = numeric(m)
thetabootc = numeric(m)
thetabootu = numeric(m)
for (j in 1:m) {
nsample = sample(norm, n, replace=TRUE)
esample = sample(exp, n, replace=TRUE)
csample = sample(c, n, replace=TRUE)
usample = sample(unif, n, replace=TRUE)
thetabootn[j] = median(nsample)
thetaboote[j] = median(esample)
thetabootc[j] = median(csample)
thetabootu[j] = median(usample)
}
se_norm[i] = sd(thetabootn)
se_exp[i] = sd(thetaboote)
se_cauchy[i] = sd(thetabootc)
se_unif[i] = sd(thetabootu)
}
zval = qnorm(.975,0,1)
se_norm
se_exp
se_cauchy
se_unif
zval = qnorm(.975, 0, 1)
thetan-zval*se_norm
thetan+zval*se_norm
thetabootn-zval*se_norm
a = sort(thetabootn)
thetabootn[c(200, 400)]
thetabootn[c(50, 400)]
thetabootn[c(20, 400)]
alpha = 0.1
nvals = c(20, 50, 100)
m = 1000
thetan = array(dim=3)
thetae = array(dim=3)
thetac = array(dim=3)
thetau = array(dim=3)
se_norm = array(dim=3)
se_exp = array(dim=3)
se_cauchy = array(dim=3)
se_unif = array(dim=3)
for (i in 1:3) {
n = nvals[i]
norm = rnorm(n)
exp = rexp(n)
unif = runif(n)
c = rcauchy(n)
#creates arrays for the 4 different distributions
thetan[i] = median(norm)
thetae[i] = median(exp)
thetac[i] = median(c)
thetau[i] = median(unif)
thetabootn = numeric(m)
thetaboote = numeric(m)
thetabootc = numeric(m)
thetabootu = numeric(m)
for (j in 1:m) {
nsample = sample(norm, n, replace=TRUE)
esample = sample(exp, n, replace=TRUE)
csample = sample(c, n, replace=TRUE)
usample = sample(unif, n, replace=TRUE)
thetabootn[j] = median(nsample)
thetaboote[j] = median(esample)
thetabootc[j] = median(csample)
thetabootu[j] = median(usample)
}
se_norm[i] = sd(thetabootn)
se_exp[i] = sd(thetaboote)
se_cauchy[i] = sd(thetabootc)
se_unif[i] = sd(thetabootu)
}
print(se_norm)
print(se_exp)
print(se_cauchy)
print(se_unif)
a = sort(thetabootn)
thetabootn[c(50, 950)]
zval = qnorm(.95)
thetan-zval*se_norm
thetan+zval*se_norm
alpha = 0.1
nvals = c(20, 50, 100)
m = 1000
thetan = array(dim=3)
thetae = array(dim=3)
thetac = array(dim=3)
thetau = array(dim=3)
se_norm = array(dim=3)
se_exp = array(dim=3)
se_cauchy = array(dim=3)
se_unif = array(dim=3)
for (i in 1:3) {
n = nvals[i]
norm = rnorm(n)
exp = rexp(n)
unif = runif(n)
c = rcauchy(n)
#creates arrays for the 4 different distributions
thetan[i] = median(norm)
thetae[i] = median(exp)
thetac[i] = median(c)
thetau[i] = median(unif)
thetabootn = numeric(m)
thetaboote = numeric(m)
thetabootc = numeric(m)
thetabootu = numeric(m)
for (j in 1:m) {
nsample = sample(norm, n, replace=TRUE)
esample = sample(exp, n, replace=TRUE)
csample = sample(c, n, replace=TRUE)
usample = sample(unif, n, replace=TRUE)
thetabootn[j] = median(nsample)
thetaboote[j] = median(esample)
thetabootc[j] = median(csample)
thetabootu[j] = median(usample)
}
se_norm[i] = sd(thetabootn)
se_exp[i] = sd(thetaboote)
se_cauchy[i] = sd(thetabootc)
se_unif[i] = sd(thetabootu)
}
zval = qnorm(.995)
print(c(thetan-zval*se_norm, thetan+zval*se_norm))
print(se_exp)
print(se_cauchy)
print(se_unif)
alpha = 0.1
nvals = c(20, 50, 100)
m = 1000
thetan = array(dim=3)
thetae = array(dim=3)
thetac = array(dim=3)
thetau = array(dim=3)
se_norm = array(dim=3)
se_exp = array(dim=3)
se_cauchy = array(dim=3)
se_unif = array(dim=3)
for (i in 1:3) {
n = nvals[i]
norm = rnorm(n)
exp = rexp(n)
unif = runif(n)
c = rcauchy(n)
#creates arrays for the 4 different distributions
thetan[i] = median(norm)
thetae[i] = median(exp)
thetac[i] = median(c)
thetau[i] = median(unif)
thetabootn = numeric(m)
thetaboote = numeric(m)
thetabootc = numeric(m)
thetabootu = numeric(m)
for (j in 1:m) {
nsample = sample(norm, n, replace=TRUE)
esample = sample(exp, n, replace=TRUE)
csample = sample(c, n, replace=TRUE)
usample = sample(unif, n, replace=TRUE)
thetabootn[j] = median(nsample)
thetaboote[j] = median(esample)
thetabootc[j] = median(csample)
thetabootu[j] = median(usample)
}
se_norm[i] = sd(thetabootn)
se_exp[i] = sd(thetaboote)
se_cauchy[i] = sd(thetabootc)
se_unif[i] = sd(thetabootu)
}
zval = qnorm(.995)
print(thetan-zval*se_norm) #lower bound for normal dist
print(thetae-zval*se_exp) #lower bound for exponential dist
print(thetac-zval*se_cauchy) #lower bound for cauchy dist
print(thetau-zval*se_unif)
install.packages("glmnet")
library(glmnet)
x = abalone$Sex+abalone$Length+abalone$Diameter+abalone$Height+abalone$Whole+abalone$Shucked+abalone$Viscera+abalone$Shell
abalone = read.csv("abalone.txt", header=TRUE)
setwd("~/CS498-AML/hw4")
abalone = read.csv("abalone.txt", header=TRUE)
library(glmnet)
x = abalone$Sex+abalone$Length+abalone$Diameter+abalone$Height+abalone$Whole+abalone$Shucked+abalone$Viscera+abalone$Shell
cvfit = cv.glmnet(x, abalone$Age)
x = c(abalone$Sex,abalone$Length,abalone$Diameter,abalone$Height,abalone$Whole,abalone$Shucked,abalone$Viscera,abalone$Shell)
cvfit = cv.glmnet(x, abalone$Age)
View(abalone)
cvfit = cv.glmnet(abalone[1:8], abalone$Age)
x = abalone[-9]
View(x)
cvfit = cv.glmnet(x, abalone$Age)
x = matrix(0,8,4177)
for (i in 1:8) {
x[i] = abalone[i]
}
cvfit = cv.glmnet(x, abalone$Age)
x = as.matrix(data.frame(abalone$Sex, abalone$Length, abalone$Diameter, abalone$Height, abalone$Whole, abalone$Shucked, abalone$Viscera, abalone$Shell))
cvfit = cv.glmnet(x, as.factor(abalone$Age))
cvfit = cv.glmnet(x, y=as.factor(abalone$Age))
xfactors = model.matrix(abalone$Age ~ abalone$Sex)
x = as.matrix(data.frame(abalone$Sex, abalone$Length, abalone$Diameter, abalone$Height, abalone$Whole, abalone$Shucked, abalone$Viscera, abalone$Shell, xfactors))
cvfit = cv.glmnet(x, y=as.factor(abalone$Age))
cvfit = cv.glmnet(x, y=abalone$Age)
plot(cvfit)
