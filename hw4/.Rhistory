}
print(bt)
print(bw)
install.packages("mvtnorm")
library(mvtnorm)
powertest = function(n, rho, alpha, m) {
decisions = numeric(m)
for (i in 1:m) {
sigma = rbind(c(1,rho), c(rho,1))
xy = rmvnorm(n, c(0,0), sigma)
x = xy[,1]
y = xy[,2]
t = cor.test(x, y)$statistic
decisions[i] = abs(t) > qt(1-alpha/2, df=n-2)
}
return(mean(decisions))
}
#a
nvals = c(10, 100, 500, 800)
delta = c(0, 0.1, 0.5, 0.8)
alpha = 0.5
rho = c(0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9)
m = 1000
at = matrix(0, 4, 4)
aw = matrix(0, 4, 4)
for (i in 1:4) {
n = nvals[i]
for (k in 1:4) {
mu = delta[k]
pt = numeric(m)
pw = numeric(m)
for (j in 1:m) {
x = rnorm(n)
y = rnorm(n, -mu, 1)
pt[j] = t.test(x, y, var.equal=TRUE)$p.value
pw[j] = wilcox.test(x, y, var.equal=TRUE)$p.value
}
at[i,k] = mean(pt)
aw[i,k] = mean(pw)
}
}
print(at) #type1 values for the t test
print(aw) #type1 values for the w test
powera = matrix(0, 4, 10)
for (i in 1:4) {
n = nvals[i]
for (j in 1:10) {
powera[i,j] = powertest(n, rho[j], alpha, m)
}
}
print(powera)
library(mvtnorm)
powertest = function(n, rho, alpha, m) {
decisions = numeric(m)
for (i in 1:m) {
sigma = rbind(c(1,rho), c(rho,1))
xy = rmvnorm(n, c(0,0), sigma)
x = xy[,1]
y = xy[,2]
t = cor.test(x, y)$statistic
decisions[i] = abs(t) > qt(1-alpha/2, df=n-2)
}
return(mean(decisions))
}
#a
nvals = c(10, 100, 500, 800)
delta = c(0, 0.1, 0.5, 0.8)
alpha = 0.5
rho = c(0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9)
m = 1000
at = matrix(0, 4, 4)
aw = matrix(0, 4, 4)
powera = numberic(m)
for (i in 1:4) {
n = nvals[i]
for (k in 1:4) {
mu = delta[k]
pt = numeric(m)
pw = numeric(m)
for (j in 1:m) {
x = rnorm(n)
y = rnorm(n, -mu, 1)
pt[j] = t.test(x, y, var.equal=TRUE)$p.value
pw[j] = wilcox.test(x, y, var.equal=TRUE)$p.value
}
at[i,k] = mean(pt)
aw[i,k] = mean(pw)
powera = mean(pt <= alpha)
}
}
print(at) #type1 values for the t test
print(aw) #type1 values for the w test
powera
library(mvtnorm)
powertest = function(n, rho, alpha, m) {
decisions = numeric(m)
for (i in 1:m) {
sigma = rbind(c(1,rho), c(rho,1))
xy = rmvnorm(n, c(0,0), sigma)
x = xy[,1]
y = xy[,2]
t = cor.test(x, y)$statistic
decisions[i] = abs(t) > qt(1-alpha/2, df=n-2)
}
return(mean(decisions))
}
#a
nvals = c(10, 100, 500, 800)
delta = c(0, 0.1, 0.5, 0.8)
alpha = 0.5
rho = c(0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9)
m = 1000
at = matrix(0, 4, 4)
aw = matrix(0, 4, 4)
powera = matrix(0, 4, 4)
for (i in 1:4) {
n = nvals[i]
for (k in 1:4) {
mu = delta[k]
pt = numeric(m)
pw = numeric(m)
for (j in 1:m) {
x = rnorm(n)
y = rnorm(n, -mu, 1)
pt[j] = t.test(x, y, var.equal=TRUE)$p.value
pw[j] = wilcox.test(x, y, var.equal=TRUE)$p.value
}
at[i,k] = mean(pt)
aw[i,k] = mean(pw)
powera[i, k] = mean(pt <= alpha)
}
}
print(at) #type1 values for the t test
print(aw) #type1 values for the w test
powera
#c
chi = c(0.1, 0.2, 0.5, 1)
ct = matrix(0, 4, 4)
cw = matrix(0, 4, 4)
for (i in 1:4) {
n = nvals[i]
for (k in 1:4) {
v = chi[k]
pt = numeric(m)
pw = numeric(m)
for (j in 1:m) {
x = rchisq(n)
y = rchisq(n, ncp=v)
pt[j] = t.test(x, y, var.equal=FALSE)$p.value
pw[j] = wilcox.test(x, y, var.equal=FALSE)$p.value
}
ct[i,k] = mean(pt)
cw[i,k] = mean(pw)
}
}
print(bt)
print(bw)
#c
chi = c(0.1, 0.2, 0.5, 1)
ct = matrix(0, 4, 4)
cw = matrix(0, 4, 4)
for (i in 1:4) {
n = nvals[i]
for (k in 1:4) {
v = chi[k]
pt = numeric(m)
pw = numeric(m)
for (j in 1:m) {
x = rchisq(n, df=n-2)
y = rchisq(n, df=n-2, ncp=v)
pt[j] = t.test(x, y, var.equal=FALSE)$p.value
pw[j] = wilcox.test(x, y, var.equal=FALSE)$p.value
}
ct[i,k] = mean(pt)
cw[i,k] = mean(pw)
}
}
print(ct)
print(cw)
#a
nvals = c(10, 100, 500, 800)
delta = c(0, 0.1, 0.5, 0.8)
alpha = 0.5
m = 1000
at = matrix(0, 4, 4)
aw = matrix(0, 4, 4)
for (i in 1:4) {
n = nvals[i]
for (k in 1:4) {
mu = delta[k]
pt = numeric(m)
pw = numeric(m)
for (j in 1:m) {
x = rnorm(n)
y = rnorm(n, -mu, 1)
pt[j] = t.test(x, y, var.equal=TRUE)$p.value
pw[j] = wilcox.test(x, y, exact=TRUE)$p.value
}
at[i,k] = mean(pt)
aw[i,k] = mean(pw)
}
}
#c
chi = c(0.1, 0.2, 0.5, 1)
ct = matrix(0, 4, 4)
cw = matrix(0, 4, 4)
for (i in 1:4) {
n = nvals[i]
for (k in 1:4) {
v = chi[k]
pt = numeric(m)
pw = numeric(m)
for (j in 1:m) {
x = rchisq(n, df=n-2)
y = rchisq(n, df=n-2, ncp=v)
pt[j] = t.test(x, y, var.equal=FALSE)$p.value
#pw[j] = wilcox.test(x, y, exact=FALSE)$p.value
}
ct[i,k] = mean(pt)
#cw[i,k] = mean(pw)
}
}
print(ct)
print(cw)
#a
nvals = c(10, 100, 500, 800)
delta = c(0, 0.1, 0.5, 0.8)
alpha = 0.5
m = 1000
at = matrix(0, 4, 4)
aw = matrix(0, 4, 4)
for (i in 1:4) {
n = nvals[i]
for (k in 1:4) {
mu = delta[k]
pt = numeric(m)
pw = numeric(m)
for (j in 1:m) {
x = rnorm(n)
y = rnorm(n, -mu, 1)
pt[j] = t.test(x, y, var.equal=TRUE)$p.value
#pw[j] = wilcox.test(x, y, exact=TRUE)$p.value
}
at[i,k] = mean(pt)
#aw[i,k] = mean(pw)
}
}
print(at) #type1 values for the t test
print(aw) #type1 values for the w test
#c
chi = c(0.1, 0.2, 0.5, 1)
ct = matrix(0, 4, 4)
cw = matrix(0, 4, 4)
for (i in 1:4) {
n = nvals[i]
for (k in 1:4) {
v = chi[k]
pt = numeric(m)
pw = numeric(m)
for (j in 1:m) {
x = rchisq(n, df=1)
y = rchisq(n, df=1, ncp=v)
pt[j] = t.test(x, y, var.equal=FALSE)$p.value
pw[j] = wilcox.test(x, y, var.equal=FALSE)$p.value
}
ct[i,k] = mean(pt)
cw[i,k] = mean(pw)
}
}
print(ct)
print(cw)
#c
chi = c(0.1, 0.4, 0.7, 1)
ct = matrix(0, 4, 4)
cw = matrix(0, 4, 4)
for (i in 1:4) {
n = nvals[i]
for (k in 1:4) {
v = chi[k]
pt = numeric(m)
pw = numeric(m)
for (j in 1:m) {
x = rchisq(n, df=1)
y = rchisq(n, df=1, ncp=v)
pt[j] = t.test(x, y, var.equal=FALSE)$p.value
pw[j] = wilcox.test(x, y, var.equal=FALSE)$p.value
}
ct[i,k] = mean(pt)
cw[i,k] = mean(pw)
}
}
print(ct)
print(cw)
alpha = 0.1
nvals = c(20, 50, 100)
se_norm = array(dim=3)
se_exp = array(dim=3)
se_unif = array(dim=3)
for (i in 1:3) {
n = nvals[i]
norm = rnorm(n)
exp = rexp(n)
unif = runif(n)
thetan = median(norm)
thetae = median(exp)
thetau = median(unif)
thetabootn = numeric(m)
thetaboote = numeric(m)
thetabootu = numeric(m)
for (j in 1:m) {
nsample = sample(norm, n, replace=TRUE)
esample = sample(exp, n, replace=TRUE)
usample = sample(unif, n, replace=TRUE)
thetabootn[j] = median(nsample)
thetaboote[j] = median(esample)
thetabootu[j] = median(usample)
}
se_norm[i] = sd(thetabootn)
se_exp[i] = sd(thetaboote)
se_unif[i] = sd(thetabootu)
}
se_norm
qnorm(.975,0,1)
alpha = 0.1
nvals = c(20, 50, 100)
thetan = array(dim=3)
thetae = array(dim=3)
thetau = array(dim=3)
se_norm = array(dim=3)
se_exp = array(dim=3)
se_unif = array(dim=3)
for (i in 1:3) {
n = nvals[i]
norm = rnorm(n)
exp = rexp(n)
unif = runif(n)
thetan[i] = median(norm)
thetae[i] = median(exp)
thetau[i] = median(unif)
thetabootn = numeric(m)
thetaboote = numeric(m)
thetabootu = numeric(m)
for (j in 1:m) {
nsample = sample(norm, n, replace=TRUE)
esample = sample(exp, n, replace=TRUE)
usample = sample(unif, n, replace=TRUE)
thetabootn[j] = median(nsample)
thetaboote[j] = median(esample)
thetabootu[j] = median(usample)
}
se_norm[i] = sd(thetabootn)
se_exp[i] = sd(thetaboote)
se_unif[i] = sd(thetabootu)
}
zval = qnorm(.975,0,1)
thetan - zval*se_norm
thetan + zval*se_norm
a = sort(thetabootn)
a[c(250,9750)]
a[c(250,975)]
a = sort(thetan)
a[c(250, 950)]
se_norm
se_exp
se_cauchy
se_unif
alpha = 0.1
nvals = c(20, 50, 100)
thetan = array(dim=3)
thetae = array(dim=3)
thetac = array(dim=3)
thetau = array(dim=3)
se_norm = array(dim=3)
se_exp = array(dim=3)
se_cauchy = array(dim=3)
se_unif = array(dim=3)
for (i in 1:3) {
n = nvals[i]
norm = rnorm(n)
exp = rexp(n)
unif = runif(n)
c = rcauchy(n)
thetan[i] = median(norm)
thetae[i] = median(exp)
thetac[i] = median(c)
thetau[i] = median(unif)
thetabootn = numeric(m)
thetaboote = numeric(m)
thetabootc = numeric(m)
thetabootu = numeric(m)
for (j in 1:m) {
nsample = sample(norm, n, replace=TRUE)
esample = sample(exp, n, replace=TRUE)
csample = sample(c, n, replace=TRUE)
usample = sample(unif, n, replace=TRUE)
thetabootn[j] = median(nsample)
thetaboote[j] = median(esample)
thetabootc[j] = median(csample)
thetabootu[j] = median(usample)
}
se_norm[i] = sd(thetabootn)
se_exp[i] = sd(thetaboote)
se_cauchy[i] = sd(thetabootc)
se_unif[i] = sd(thetabootu)
}
zval = qnorm(.975,0,1)
se_cauchy
delta=c(1,5,10,50)
nvals=seq(2,50,by=1)
power.t=
power.wil.exact=
power.wil.asym=rep(0,length(nvals))
t.test.table=
wilcox.asym.table=
wilcox.exact.table=
matrix(nrow=length(nvals),ncol=length(delta))
for(d in 1:length(delta)) {
for (i in 1:length(nvals)) {
k = nvals[i]
power.t[i] = mean(replicate(500,t.test(
rexp(k,1),rexp(k,delta[d]),var.equal = TRUE)$p.value) <= .05)
power.wil.asym[i] = mean(replicate(500,wilcox.test(
rexp(k,1),rexp(k,delta[d]),exact = FALSE)$p.value) <= .05)
power.wil.exact[i] = mean(replicate(500,wilcox.test(
rexp(k,1),rexp(k,delta[d]),exact = TRUE)$p.value) <= .05)
}
t.test.table[,d]=power.t
wilcox.asym.table[,d]=power.wil.asym
wilcox.exact.table[,d]=power.wil.exact
}
t.test.table
#a
nvals = c(10, 100, 500, 800)
delta = c(0, 0.1, 0.5, 0.8)
alpha = 0.5
m = 1000
at = matrix(0, 4, 4)
aw_exact = matrix(0, 4, 4)
aw_asym = matrix(0, 4, 4)
for (i in 1:4) {
n = nvals[i]
for (k in 1:4) {
mu = delta[k]
pt = numeric(m)
pwe = numeric(m)
pwa = numeric(m)
for (j in 1:m) {
x = rnorm(n)
y = rnorm(n, -mu, 1)
pt[j] = t.test(x, y, var.equal=TRUE)$p.value
pwe[j] = wilcox.test(x, y, exact=TRUE)$p.value
pwa[j] = wilcox.test(x, y, exact=FALSE)$p.value
}
at[i,k] = mean(pt)
aw_exact[i,k] = mean(pwe)
aw_asym[i,k] = mean(pwa)
}
}
#a
nvals = c(10, 100, 500, 800)
delta = c(0, 0.1, 0.5, 0.8)
alpha = 0.5
m = 100
at = matrix(0, 4, 4)
aw_exact = matrix(0, 4, 4)
aw_asym = matrix(0, 4, 4)
for (i in 1:4) {
n = nvals[i]
for (k in 1:4) {
mu = delta[k]
pt = numeric(m)
pwe = numeric(m)
pwa = numeric(m)
for (j in 1:m) {
x = rnorm(n)
y = rnorm(n, -mu, 1)
pt[j] = t.test(x, y, var.equal=TRUE)$p.value
pwe[j] = wilcox.test(x, y, exact=TRUE)$p.value
pwa[j] = wilcox.test(x, y, exact=FALSE)$p.value
}
at[i,k] = mean(pt)
aw_exact[i,k] = mean(pwe)
aw_asym[i,k] = mean(pwa)
}
}
#a
nvals = c(10, 100, 200, 500)
delta = c(0, 0.1, 0.5, 0.8)
alpha = 0.5
m = 50
at = matrix(0, 4, 4)
aw_exact = matrix(0, 4, 4)
#aw_asym = matrix(0, 4, 4)
for (i in 1:4) {
n = nvals[i]
for (k in 1:4) {
mu = delta[k]
pt = numeric(m)
pwe = numeric(m)
pwa = numeric(m)
for (j in 1:m) {
x = rnorm(n)
y = rnorm(n, -mu, 1)
pt[j] = t.test(x, y, var.equal=TRUE)$p.value
pwe[j] = wilcox.test(x, y, exact=TRUE)$p.value
#pwa[j] = wilcox.test(x, y, exact=FALSE)$p.value
}
at[i,k] = mean(pt)
aw_exact[i,k] = mean(pwe)
#aw_asym[i,k] = mean(pwa)
}
}
