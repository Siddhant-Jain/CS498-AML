k = k+accept
}
return(list(x=x, k=k))
}
N = 2000
sigma = c(.05, .5, 2, 15)
x0 = 10
rw1 = rw.met(sigma[1],x0,N)
rw2 = rw.met(sigma[2],x0,N)
rw3 = rw.met(sigma[3],x0,N)
rw4 = rw.met(sigma[4],x0,N)
print(c(rw1$k, rw2$k, rw3$k, rw4$l))
laplace = function(x) {
1/2 * exp(-abs(x))
}
rw.met = function(sigma, x0, N) {
x = numeric(N)
x[1] = x0
u = runif(N)
k = 0
for (i in 2:N) {
y = rnorm(1,x[i-1], sigma)
ratio = laplace(y)/laplace(x[i-1])
accept = u[i] <= ratio
x[i] = y*accept + x[i-1]*(1-accept)
k = k+accept
}
return(list(x=x, k=k))
}
N = 2000
sigma = c(.05, .5, 2, 15)
x0 = 10
rw1 = rw.met(sigma[1],x0,N)
rw2 = rw.met(sigma[2],x0,N)
rw3 = rw.met(sigma[3],x0,N)
rw4 = rw.met(sigma[4],x0,N)
print(c(rw1$k, rw2$k, rw3$k, rw4$k))
226/2000
gr = function(psi) {
psi = as.matrix(psi)
n = ncol(psi)
k = nrow(psi)
psi.means = rowMeans(psi)
B = n*var(psi.means)
psi.w = apply(psi,1,var)
w = mean(psi.w)
v.hat = w*(n-1)/n+(B/n)
r.hat = v.hat/w
return(r.hat)
}
prob = function(y,win) {
if (y < = || y >=0.5) return(0)
return((1/3)^win[1] * ((1-y)/3)^win[2] * ((1-2*y)/3)^win[3] * ((2*y)/3)^win[4] * (y/3)^win[5])
}
chain = function(m, w, x1, win) {
u = runif(m)
v = runif(m, -w, w)
x = numeric(m)
x[1] = x1
for (i in 2:m) {
y = x[i-1] + v[i]
if (u[i] <= prob(y,win) / prob(x[i-1],win)) {
x[i] = y
} else {
x[i] = x[i-1]
}
}
return(x)
}
b = 0.2
w = 0.25
m = 5000
burn = 1000
days = 250
x = numeric(m)
i = sample(1:5, size=days, replace=TRUE, prob=c(1,1-b,1-2*b,2*b,b))
win = tabulate(i)
k=4
x0 = c(-5,-.25,.25,5)
X = matrix(0,k,n)
for (i in 1:k) {
X[i,] = chain(m,w,x0[i],win)
}
psi = t(apply(X,1,cumsum))
for (i in 1:nrow(psi)) {
psi[i,] = psi[i,]/(1:ncol(psi))
}
print(gr.psi)
gr = function(psi) {
psi = as.matrix(psi)
n = ncol(psi)
k = nrow(psi)
psi.means = rowMeans(psi)
B = n*var(psi.means)
psi.w = apply(psi,1,var)
w = mean(psi.w)
v.hat = w*(n-1)/n+(B/n)
r.hat = v.hat/w
return(r.hat)
}
prob = function(y,win) {
if (y < = || y >=0.5) return(0)
return((1/3)^win[1] * ((1-y)/3)^win[2] * ((1-2*y)/3)^win[3] * ((2*y)/3)^win[4] * (y/3)^win[5])
}
chain = function(m, w, x1, win) {
u = runif(m)
v = runif(m, -w, w)
x = numeric(m)
x[1] = x1
for (i in 2:m) {
y = x[i-1] + v[i]
if (u[i] <= prob(y,win) / prob(x[i-1],win)) {
x[i] = y
} else {
x[i] = x[i-1]
}
}
return(x)
}
b = 0.2
w = 0.25
m = 5000
burn = 1000
days = 250
x = numeric(m)
i = sample(1:5, size=days, replace=TRUE, prob=c(1,1-b,1-2*b,2*b,b))
win = tabulate(i)
k=4
x0 = c(-5,-.25,.25,5)
X = matrix(0,k,n)
for (i in 1:k) {
X[i,] = chain(m,w,x0[i],win)
}
psi = t(apply(X,1,cumsum))
for (i in 1:nrow(psi)) {
psi[i,] = psi[i,]/(1:ncol(psi))
}
print(gr(psi))
gr = function(psi) {
psi = as.matrix(psi)
n = ncol(psi)
k = nrow(psi)
psi.means = rowMeans(psi)
B = n*var(psi.means)
psi.w = apply(psi,1,var)
w = mean(psi.w)
v.hat = w*(n-1)/n+(B/n)
r.hat = v.hat/w
return(r.hat)
}
prob = function(y,win) {
if (y < = || y >=0.5) return(0)
return((1/3)^win[1] * ((1-y)/3)^win[2] * ((1-2*y)/3)^win[3] * ((2*y)/3)^win[4] * (y/3)^win[5])
}
chain = function(m, w, x1, win) {
u = runif(m)
v = runif(m, -w, w)
x = numeric(m)
x[1] = x1
for (i in 2:m) {
y = x[i-1] + v[i]
if (u[i] <= prob(y,win) / prob(x[i-1],win)) {
x[i] = y
} else {
x[i] = x[i-1]
}
}
return(x)
}
b = 0.2
w = 0.25
m = 5000
burn = 1000
days = 250
x = numeric(m)
i = sample(1:5, size=days, replace=TRUE, prob=c(1,1-b,1-2*b,2*b,b))
win = tabulate(i)
k=4
x0 = c(-5,-.25,.25,5)
X = matrix(0,k,m)
for (i in 1:k) {
X[i,] = chain(m,w,x0[i],win)
}
psi = t(apply(X,1,cumsum))
for (i in 1:nrow(psi)) {
psi[i,] = psi[i,]/(1:ncol(psi))
}
print(gr(psi))
prob = function(y,win) {
if (y < = || y >=0.5)
prob = function(y,win) {
if (y <= || y >=0.5)
prob = function(y,win) {
if (y < 0 || y >=0.5)
return(0)
return((1/3)^win[1] * ((1-y)/3)^win[2] * ((1-2*y)/3)^win[3] * ((2*y)/3)^win[4] * (y/3)^win[5])
}
gr = function(psi) {
psi = as.matrix(psi)
n = ncol(psi)
k = nrow(psi)
psi.means = rowMeans(psi)
B = n*var(psi.means)
psi.w = apply(psi,1,var)
w = mean(psi.w)
v.hat = w*(n-1)/n+(B/n)
r.hat = v.hat/w
return(r.hat)
}
prob = function(y,win) {
if (y < 0 || y >=0.5)
return(0)
return((1/3)^win[1] * ((1-y)/3)^win[2] * ((1-2*y)/3)^win[3] * ((2*y)/3)^win[4] * (y/3)^win[5])
}
chain = function(m, w, x1, win) {
u = runif(m)
v = runif(m, -w, w)
x = numeric(m)
x[1] = x1
for (i in 2:m) {
y = x[i-1] + v[i]
if (u[i] <= prob(y,win) / prob(x[i-1],win)) {
x[i] = y
} else {
x[i] = x[i-1]
}
}
return(x)
}
b = 0.2
w = 0.25
m = 5000
burn = 1000
days = 250
x = numeric(m)
i = sample(1:5, size=days, replace=TRUE, prob=c(1,1-b,1-2*b,2*b,b))
win = tabulate(i)
k=4
x0 = c(-5,-.25,.25,5)
X = matrix(0,k,m)
for (i in 1:k) {
X[i,] = chain(m,w,x0[i],win)
}
psi = t(apply(X,1,cumsum))
for (i in 1:nrow(psi)) {
psi[i,] = psi[i,]/(1:ncol(psi))
}
print(gr(psi))
if (u[i] <= (prob(y,win) / prob(x[i-1],win))) {
x[i] = y
} else {
x[i] = x[i-1]
}
gr = function(psi) {
psi = as.matrix(psi)
n = ncol(psi)
k = nrow(psi)
psi.means = rowMeans(psi)
B = n*var(psi.means)
psi.w = apply(psi,1,var)
w = mean(psi.w)
v.hat = w*(n-1)/n+(B/n)
r.hat = v.hat/w
return(r.hat)
}
prob = function(y,win) {
if (y < 0 || y >=0.5)
return(0)
return((1/3)^win[1] * ((1-y)/3)^win[2] * ((1-2*y)/3)^win[3] * ((2*y)/3)^win[4] * (y/3)^win[5])
}
chain = function(m, w, x1, win) {
u = runif(m)
v = runif(m, -w, w)
x = numeric(m)
x[1] = x1
for (i in 2:m) {
y = x[i-1] + v[i]
if (u[i] <= (prob(y,win) / prob(x[i-1],win))) {
x[i] = y
} else {
x[i] = x[i-1]
}
}
return(x)
}
b = 0.2
w = 0.25
m = 5000
burn = 1000
days = 250
x = numeric(m)
i = sample(1:5, size=days, replace=TRUE, prob=c(1,1-b,1-2*b,2*b,b))
win = tabulate(i)
k=4
x0 = c(-5,-.25,.25,5)
X = matrix(0,k,m)
for (i in 1:k) {
X[i,] = chain(m,w,x0[i],win)
}
psi = t(apply(X,1,cumsum))
for (i in 1:nrow(psi)) {
psi[i,] = psi[i,]/(1:ncol(psi))
}
print(gr(psi))
a = runif(1)
prob(a,win)
b = runif(1,-.25,.25)
prob(a+b,win)
prob = function(y,win) {
if (y < 0 || y >=0.5)
return(0)
return((1/3)^win[1] * ((1-y)/3)^win[2] * ((1-2*y)/3)^win[3] * ((2*y)/3)^win[4] * (y/3)^win[5])
}
prob(a+b,win)
gr = function(psi) {
psi = as.matrix(psi)
n = ncol(psi)
k = nrow(psi)
psi.means = rowMeans(psi)
B = n*var(psi.means)
psi.w = apply(psi,1,var)
w = mean(psi.w)
v.hat = w*(n-1)/n+(B/n)
r.hat = v.hat/w
return(r.hat)
}
prob = function(y,win) {
if (y < 0 || y >=0.5)
return(0)
return((1/3)^win[1] * ((1-y)/3)^win[2] * ((1-2*y)/3)^win[3] * ((2*y)/3)^win[4] * (y/3)^win[5])
}
chain = function(m, w, x1, win) {
u = runif(m)
v = runif(m, -w, w)
x = numeric(m)
x[1] = x1
for (i in 2:m) {
y = x[i-1] + v[i]
if (u[i] <= (prob(y,win) / prob(x[i-1],win))) {
x[i] = y
} else {
x[i] = x[i-1]
}
}
return(x)
}
b = 0.2
w = 0.25
m = 5000
burn = 1000
days = 250
x = numeric(m)
i = sample(1:5, size=days, replace=TRUE, prob=c(1,1-b,1-2*b,2*b,b))
win = tabulate(i)
k=4
x0 = c(-5,-.25,.25,5)
X = matrix(0,k,m)
for (i in 1:k) {
X[i,] = chain(m,w,x0[i],win)
}
psi = t(apply(X,1,cumsum))
for (i in 1:nrow(psi)) {
psi[i,] = psi[i,]/(1:ncol(psi))
}
print(gr(psi))
gr = function(psi) {
psi = as.matrix(psi)
n = ncol(psi)
k = nrow(psi)
psi.means = rowMeans(psi)
B = n*var(psi.means)
psi.w = apply(psi,1,var)
w = mean(psi.w)
v.hat = w*(n-1)/n+(B/n)
r.hat = v.hat/w
return(r.hat)
}
prob = function(y,win) {
if (y < 0 || y >=0.5)
return(0)
return((1/3)^win[1] * ((1-y)/3)^win[2] * ((1-2*y)/3)^win[3] * ((2*y)/3)^win[4] * (y/3)^win[5])
}
chain = function(m, w, x1, win) {
u = runif(m)
v = runif(m, -w, w)
x = numeric(m)
x[1] = x1
for (i in 2:m) {
y = x[i-1] + v[i]
if (u[i] <= (prob(y,win) / prob(x[i-1],win))) {
x[i] = y
} else {
x[i] = x[i-1]
}
}
return(x)
}
b = 0.2
w = 0.25
m = 5000
burn = 1000
days = 250
x = numeric(m)
i = sample(1:5, size=days, replace=TRUE, prob=c(1,1-b,1-2*b,2*b,b))
win = tabulate(i)
k=4
x0 = c(-1,-.25,.25,1)
X = matrix(0,k,m)
for (i in 1:k) {
X[i,] = chain(m,w,x0[i],win)
}
psi = t(apply(X,1,cumsum))
for (i in 1:nrow(psi)) {
psi[i,] = psi[i,]/(1:ncol(psi))
}
print(gr(psi))
chain(m,w,.25,win)
chain(m,w,-.25,win)
chain(m,w,.5,win)
chain(m,w,0,win)
chain(m,w,1,win)
chain(m,w,-1,win)
chain(m,w,.1,win)
chain(m,w,-.1,win)
chain(m,w,.3,win)
chain(m,w,.4,win)
gr = function(psi) {
psi = as.matrix(psi)
n = ncol(psi)
k = nrow(psi)
psi.means = rowMeans(psi)
B = n*var(psi.means)
psi.w = apply(psi,1,var)
w = mean(psi.w)
v.hat = w*(n-1)/n+(B/n)
r.hat = v.hat/w
return(r.hat)
}
prob = function(y,win) {
if (y < 0 || y >=0.5)
return(0)
return((1/3)^win[1] * ((1-y)/3)^win[2] * ((1-2*y)/3)^win[3] * ((2*y)/3)^win[4] * (y/3)^win[5])
}
chain = function(m, w, x1, win) {
u = runif(m)
v = runif(m, -w, w)
x = numeric(m)
x[1] = x1
for (i in 2:m) {
y = x[i-1] + v[i]
if (u[i] <= (prob(y,win) / prob(x[i-1],win))) {
x[i] = y
} else {
x[i] = x[i-1]
}
}
return(x)
}
b = 0.2
w = 0.25
m = 5000
burn = 1000
days = 250
x = numeric(m)
i = sample(1:5, size=days, replace=TRUE, prob=c(1,1-b,1-2*b,2*b,b))
win = tabulate(i)
k=4
x0 = c(0,.1,.25,.4)
X = matrix(0,k,m)
for (i in 1:k) {
X[i,] = chain(m,w,x0[i],win)
}
psi = t(apply(X,1,cumsum))
for (i in 1:nrow(psi)) {
psi[i,] = psi[i,]/(1:ncol(psi))
}
print(gr(psi))
tracks = read.csv("default_plus_chromatic_features_1059_tracks.txt", header=FALSE)
names(tracks)[names(tracks)=="V117"] <- "lat"
names(tracks)[names(tracks)=="V118"] <- "long"
# Add up all explanatory variable columns
tracks_reg_lat = lm(tracks[,117]~rowSums(tracks[,1:116]))
tracks_reg_long = lm(tracks[,118]~rowSums(tracks[,1:116]))
plot(rowSums(tracks[,1:116]), tracks[,117], main = "Latitude vs Audio features", xlab="Audio features",ylab="Latitude")
abline(tracks_reg_lat$coefficients)
plot(rowSums(tracks[,1:116]), tracks[,118], main = "Longitude vs Audio features", xlab="Audio features",ylab="Longitude")
abline(tracks_reg_long$coefficients)
# R-Squared value for naive linear regression:
summary(tracks_reg_lat)$r.squared
library("MASS")
tracks_xy_lat = cbind(rowSums(tracks[,1:116]),tracks[,117])
tracks_xy_long = cbind(rowSums(tracks[,1:116]),tracks[,118])
theta = 1/180*pi
tmat = matrix(c(cos(theta),sin(theta),-sin(theta),cos(theta)),ncol=2,nrow=2)
tracks_xy_lat[,2] = tracks_xy_lat[,2]/2
for(i in 1:dim(tracks_xy_lat)[1]){
temp = tmat%*%t(t(tracks_xy_lat[i,]))
tracks_xy_lat[i,] = t(temp)
}
plot(tracks_xy_lat[,1], tracks_xy_lat[,2], main = "Latitude vs Audio features", xlab="Audio features",ylab="Latitude")
tracks_reg_lat = lm(tracks_xy_lat[,2]~tracks_xy_lat[,1])
# (tracks_reg_lat)$coefficients
summary(tracks_reg_lat)$r.squared
bc = boxcox(tracks_xy_lat[,2]-min(tracks_xy_lat[,2])+1~tracks_xy_lat[,1])
predict(ridgefit, newx = tracks[,1:116], s = "lambda.min")
library(glmnet)
tracks = read.csv("default_plus_chromatic_features_1059_tracks.txt", header=FALSE)
ridgefit = cv.glmnet(as.matrix(tracks[,1:116]), as.matrix(tracks[,117]), alpha=0)
predict(ridgefit, newx = tracks[,1:116], s = "lambda.min")
predict(ridgefit, newx = as.matrix(tracks[,1:116]), s = "lambda.min")
View(card_data)
ridgecard = cv.glmnet(as.matrix(card_data[,2:24]), as.matrix(card_data[,25]), alpha=0, type.measure = "class", family = "binomial")
